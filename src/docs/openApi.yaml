openapi: 3.0.0
info:
  title: Training
  description: Working with files.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server

paths:
  /users/registration:
    post:
      tags:
        - User
      summary: Registration user .
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registrationUser"

      responses:
        200:
          description: Succes
        400:
          description: User already exists
        201:
          description: User created
        500:
          description: Server error

  /users/authorization:
    post:
      tags:
        - User
      summary: Authorization user .
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authorizationUser"
      responses:
        200:
          description: Succes
        400:
          description: User not found or wrong password
        500:
          description: Server error

  /users/oneUser:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Find one user.
      responses:
        200:
          description: Succes
        500:
          description: Server error

  /users/update:
    patch:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Update user .
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUser"
      responses:
        200:
          description: Succes
        202:
          description: User updated
        500:
          description: Server error

  /users/delete:
    delete:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Delete user.
      responses:
        200:
          description: Succes
        500:
          description: Server error

  /image_users/add_image:
    post:
      security:
        - bearerAuth: []
      tags:
        - File Image
      summary: Uploads a file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/addImageUser"
      responses:
        200:
          description: Succes
        201:
          description: Image save
        400:
          description: Image already exists
        500:
          description: Server error

  /image_users/find_all:
    get:
      security:
        - bearerAuth: []
      tags:
        - File Image
      summary: Find all image user.
      responses:
        200:
          description: Succes
        500:
          description: Server error

  /user_pdf/generate:
    post:
      tags:
        - File PDF
      summary: Generate PDF from user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userPDFGenerate"
      responses:
        200:
          description: Succes
        201:
          description: The document is generated and stored in the database
        400:
          description: File sweat with this name exists.
        404:
          description: Not found user or image
        500:
          description: Server error

  /user_pdf/find_all:
    get:
      security:
        - bearerAuth: []
      tags:
        - File PDF
      summary: Find all PDF files user.
      responses:
        200:
          description: Succes
        500:
          description: Server error

  /user_pdf/find_one:
    get:
      security:
        - bearerAuth: []
      tags:
        - File PDF
      summary: Find all PDF files user.
      parameters:
        - in: query
          name: fileName
          schema:
            type: string
            example: My PDF
          required: true
          description: File name.
      responses:
        200:
          description: Succes
        500:
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    registrationUser:
      type: object
      required:
        - firstName
        - lastName
        - password
        - userEmail
      properties:
        firstName:
          type: string
          description: User first name.
          example: Yra
        lastName:
          type: string
          description: User last name.
          example: Stell
        userEmail:
          type: string
          description: User email.
          example: pete7833@examples.com
        password:
          type: string
          description: User password.
          example: "21dsa"

    authorizationUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User email.
          example: pete7833@examples.com
        password:
          type: string
          description: Password user.
          example: 21dsa

    updateUser:
      type: object
      additionalProperties: false
      properties:
        firstName:
          type: string
          description: User first name.
          example: Yra
        lastName:
          type: string
          description: User last name.
          example: Stell
        newUserEmail:
          type: string
          description: User email.
          example: pete7833@examples.com
        password:
          type: string
          description: User password.
          example: "21dsa"

    addImageUser:
      required:
        - fileName
        - file
      type: object
      properties:
        fileName:
          type: string
          description: Name image.
          example: My Image
        file:
          description: Only image .jpg or .png
          type: string
          format: binary

    userPDFGenerate:
      required:
        - fileName
        - userEmail
        - imageName
      type: object
      properties:
        fileName:
          type: string
          description: File name
          example: My PDF
        userEmail:
          type: string
          description: User email.
          example: pete7833@examples.com
        imageName:
          type: string
          description: Picture saved in the database for this user.
          example: My Image
